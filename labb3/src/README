Labb 3
Grupp 9
Simon Sundström & Felix Jansson

Del (b)

* 	Förklara varför varje rad av utskriften ser ut som den gör, rita 
	gärna.
    
    k=5
	a=1
	b=0
	Anledningen till att k fortfarande är 5 och inte 6 efter att 
	changeValue ökat ingående värde är att det skapas en ny instans
	som får värdet av k och inte en referens till k. a blir 1 för
	att vi tillkallar befintlig instansmetod och då ökas just den 
	instansen. Sedan blir b noll bara för att det skapas en ny 
	temporär instans i metoden changeValue som sedan försvinner 
	efter att metoden körts klart och därför förblir instansen i 
	main oförändrad. 

Del (c)

* 	Vad händer om man gör om instansvariabeln i CounterModel som
	håller reda på räknaren till "static"?

	Om instansvariabeln ändras till en static så blir det en
	klassvariabel. Det fyller ingen funktion att skapa flera olika 
	instanser av counterModel då dem alla refererar till samma 
	värde. Ändrar du första instansen ändras alla andra också. 

*	Skall denna metod getNbrOfCounters() vara en klassmetod eller 
	en instansmetod? Kan den vara bägge? Vilket är lämpligast?

	getNbrOfCounters() kan vara både och. Det mest logiska och bästa
	är att göra den till en klassmetod. Anledningarna är att 
	variabeln NbrOfCounters ska räkna antalet skapade instanser.
	Vilket medför att den måste vara en klassvariabel. Det känns 
	även logiskt rätt att "fråga" klassen efter en klassvariabel än 
	att fråga en instans om klassvariabeln. Ett problem med det
	sistnämnda är att ifall ingen instans är skapad kan inget 
	retuneras då inga instansmetoder finns att fråga, vilket kan 
	göras med en klassmetod då den alltid existerar.
	Slutsats: static metoder för klassvariabler och metoder utan 
	static för instansvariabler. 

Del (e)

*	Vad innebär det att två räknare är lika?

	Att två räknare är lika innebär att deras nuvarande värde är 
	samma samt att de båda har samma vändpunkt/modulusvärde. 
	Alternativt att båda är instanser av samma objekt.
	
Del (h)

*	Vad händer om man anropar increment på en FastCounter?

	När increment tillkallas på en FastCounter så tillkallas metoden
	från superklassen CounterModel. Skillnaden är att i FastCounter 
	körs increment flera gånger med hjälp av en loop som tillagds i 
	increment för FastCounter. 